#include "Camera.h"

using namespace DirectX;

Camera::Camera( int window_width, int window_height )
{
	aspectRatio = (float)window_width / window_height;

	phi = -3.14159265f / 2;
	theta = 0;
	nowTheta = theta;

	//ビュー行列の計算
	UpdateViewMatrix();

	// 射影行列の計算
	UpdateProjectionMatrix();

	// ビュープロジェクションの合成
	matViewProjection = matView * matProjection;
}

void Camera::Update()
{
	//Input* input = Input::GetInstance();

	dirty = false;

	//Input::MouseMove mouseMove = input->GetMouseMove();

	//if (input->PushMouseRight())
	//{
	//	phi += XM_PI / 180.0f * mouseMove.lX / 7;
	//	theta += XM_PI / 180.0f * mouseMove.lY / 7;
	//	if (theta > 40 * XM_PI / 180.0f)
	//		theta = 40 * XM_PI / 180.0f;
	//	else if (theta < -40 * XM_PI / 180.0f)
	//		theta = -40 * XM_PI / 180.0f;

	//	if (phi > 360 * XM_PI / 180.0f)
	//		phi -= 360 * XM_PI / 180.0f;
	//	else if (phi < 0)
	//		phi += 360 * XM_PI / 180.0f;

	//	/*if (theta < 0)
	//	{
	//		distance = 48 * (1 + theta * 1.1f);
	//	}*/
	//	//printf("phi : %f , theta : %f\n", phi, theta);
	//	dirty = true;
	//}

	// ホイール入力で距離を変更
	/*if (mouseMove.lZ != 0) {
		distance -= mouseMove.lZ / 100.0f;
		distance = max(distance, 1.0f);
		dirty = true;
	}*/

	{
		// define the camera eye, target, and up vectors
		XMFLOAT3 cameraEye = eye;
		XMFLOAT3 cameraTarget = target;
		XMFLOAT3 cameraUp = up;

		// limit the pitch angle to prevent camera flipping
		/*if (theta > 89.0f) {
			theta = 89.0f;
		}
		if (theta < -89.0f) {
			theta = -89.0f;
		}*/

		// calculate the new camera front vector
		XMFLOAT3 front;
		front.x = cos(XMConvertToRadians(phi)) * cos(XMConvertToRadians(theta));
		front.y = sin(XMConvertToRadians(theta));
		front.z = sin(XMConvertToRadians(phi)) * cos(XMConvertToRadians(theta));
		XMVECTOR newCameraFront = XMVector3Normalize(XMLoadFloat3(&front));

		// update the camera position to rotate around the boss
		XMFLOAT3 cameraDirection = XMFLOAT3(cameraEye.x - bossPos.x, cameraEye.y - bossPos.y, cameraEye.z - bossPos.z);
		XMVECTOR newCameraDirection = XMVector3Normalize(XMLoadFloat3(&cameraDirection));
		XMFLOAT3 cameraRight;
		XMStoreFloat3(&cameraRight, XMVector3Normalize(XMVector3Cross(XMLoadFloat3(&cameraUp), newCameraDirection)));
		XMFLOAT3 cameraUpRotated;
		XMStoreFloat3(&cameraUpRotated, XMVector3Normalize(XMVector3Cross(newCameraDirection, XMLoadFloat3(&cameraRight))));
		XMFLOAT3 newCameraPos = XMFLOAT3(bossPos.x + XMVectorGetX(newCameraDirection) * distance, bossPos.y + XMVectorGetY(newCameraDirection) * distance, bossPos.z + XMVectorGetZ(newCameraDirection) * distance);

		// adjust the camera position to keep the player in the center of the view
		XMFLOAT3 playerDirection = XMFLOAT3(playerPos.x - newCameraPos.x, playerPos.y - newCameraPos.y, playerPos.z - newCameraPos.z);
		XMVECTOR newPlayerDirection = XMVector3Normalize(XMLoadFloat3(&playerDirection));
		float dotProduct = XMVectorGetX(XMVector3Dot(newCameraFront, newPlayerDirection));
		if (dotProduct < 0.9f) {
			newCameraPos = XMFLOAT3(playerPos.x - XMVectorGetX(newCameraFront) * distance, playerPos.y - XMVectorGetY(newCameraFront) * distance, playerPos.z - XMVectorGetZ(newCameraFront) * distance);
		}

		// update the camera eye, target, and up vectors
		eye = newCameraPos;
		target = bossPos;
		up = cameraUpRotated;

		viewDirty = true;
	}

	//if (dirty || viewDirty) {
	//	nowTheta = theta;
	//	/*if (theta < 0)
	//		nowTheta = 0;*/
	//	eyeTransfer = Vector3(sin(nowTheta), cos(phi) * cos(nowTheta), sin(phi) * cos(nowTheta)) * distance;
	//	eye = Vector3(cos(phi) * cos(nowTheta), sin(nowTheta), sin(phi) * cos(nowTheta)) * distance + target;
	//	viewDirty = true;
	//}

	if ( viewDirty || projectionDirty ) {
		// 再計算必要なら
		if ( viewDirty ) {
			// ビュー行列更新
			UpdateViewMatrix();
			viewDirty = false;
		}

		// 再計算必要なら
		if ( projectionDirty ) {
			// ビュー行列更新
			UpdateProjectionMatrix();
			projectionDirty = false;
		}
		// ビュープロジェクションの合成
		matViewProjection = matView * matProjection;
	}
}

void Camera::UpdateViewMatrix()
{
	// ビュー行列の更新
	//matView = XMMatrixLookAtLH(XMLoadFloat3(&eye), XMLoadFloat3(&target), XMLoadFloat3(&up));

	// 視点座標
	XMVECTOR eyePosition = XMLoadFloat3( &eye );
	// 注視点座標
	XMVECTOR targetPosition = XMLoadFloat3( &target );
	// （仮の）上方向
	XMVECTOR upVector = XMLoadFloat3( &up );

	// カメラZ軸（視線方向）
	XMVECTOR cameraAxisZ = XMVectorSubtract( targetPosition, eyePosition );
	// 0ベクトルだと向きが定まらないので除外
	assert( !XMVector3Equal( cameraAxisZ, XMVectorZero() ) );
	assert( !XMVector3IsInfinite( cameraAxisZ ) );
	assert( !XMVector3Equal( upVector, XMVectorZero() ) );
	assert( !XMVector3IsInfinite( upVector ) );
	// ベクトルを正規化
	cameraAxisZ = XMVector3Normalize( cameraAxisZ );

	// カメラのX軸（右方向）
	XMVECTOR cameraAxisX;
	// X軸は上方向→Z軸の外積で求まる
	cameraAxisX = XMVector3Cross( upVector, cameraAxisZ );
	// ベクトルを正規化
	cameraAxisX = XMVector3Normalize( cameraAxisX );

	// カメラのY軸（上方向）
	XMVECTOR cameraAxisY;
	// Y軸はZ軸→X軸の外積で求まる
	cameraAxisY = XMVector3Cross( cameraAxisZ, cameraAxisX );

	// ここまでで直交した3方向のベクトルが揃う
	//（ワールド座標系でのカメラの右方向、上方向、前方向）	

	// カメラ回転行列
	XMMATRIX matCameraRot;
	// カメラ座標系→ワールド座標系の変換行列
	matCameraRot.r[0] = cameraAxisX;
	matCameraRot.r[1] = cameraAxisY;
	matCameraRot.r[2] = cameraAxisZ;
	matCameraRot.r[3] = XMVectorSet( 0, 0, 0, 1 );
	// 転置により逆行列（逆回転）を計算
	matView = XMMatrixTranspose( matCameraRot );

	// 視点座標に-1を掛けた座標
	XMVECTOR reverseEyePosition = XMVectorNegate( eyePosition );
	// カメラの位置からワールド原点へのベクトル（カメラ座標系）
	XMVECTOR tX = XMVector3Dot( cameraAxisX, reverseEyePosition );	// X成分
	XMVECTOR tY = XMVector3Dot( cameraAxisY, reverseEyePosition );	// Y成分
	XMVECTOR tZ = XMVector3Dot( cameraAxisZ, reverseEyePosition );	// Z成分
	// 一つのベクトルにまとめる
	XMVECTOR translation = XMVectorSet( tX.m128_f32[0], tY.m128_f32[1], tZ.m128_f32[2], 1.0f );
	// ビュー行列に平行移動成分を設定
	matView.r[3] = translation;

#pragma region 全方向ビルボード行列の計算
	// ビルボード行列
	matBillboard.r[0] = cameraAxisX;
	matBillboard.r[1] = cameraAxisY;
	matBillboard.r[2] = cameraAxisZ;
	matBillboard.r[3] = XMVectorSet( 0, 0, 0, 1 );
#pragma endregion

#pragma region Y軸回りビルボード行列の計算
	// カメラX軸、Y軸、Z軸
	XMVECTOR ybillCameraAxisX, ybillCameraAxisY, ybillCameraAxisZ;

	// X軸は共通
	ybillCameraAxisX = cameraAxisX;
	// Y軸はワールド座標系のY軸
	ybillCameraAxisY = XMVector3Normalize( upVector );
	// Z軸はX軸→Y軸の外積で求まる
	ybillCameraAxisZ = XMVector3Cross( ybillCameraAxisX, ybillCameraAxisY );

	// Y軸回りビルボード行列
	matBillboardY.r[0] = ybillCameraAxisX;
	matBillboardY.r[1] = ybillCameraAxisY;
	matBillboardY.r[2] = ybillCameraAxisZ;
	matBillboardY.r[3] = XMVectorSet( 0, 0, 0, 1 );
#pragma endregion
}

void Camera::UpdateProjectionMatrix()
{
	// 平行投影による射影行列の生成
	//constMap->mat = XMMatrixOrthographicOffCenterLH(
	//	0, window_width,
	//	window_height, 0,
	//	0, 1);
	// 透視投影による射影行列の生成
	matProjection = XMMatrixPerspectiveFovLH(
		XMConvertToRadians( 60.0f ),
		aspectRatio,
		0.1f, 1000.0f
	);
}

void Camera::MoveEyeVector( const XMFLOAT3 &move )
{
	XMFLOAT3 eye_moved = GetEye();

	eye_moved.x += move.x;
	eye_moved.y += move.y;
	eye_moved.z += move.z;

	SetEye( eye_moved );
}

void Camera::MoveVector( const XMFLOAT3 &move )
{
	XMFLOAT3 eye_moved = GetEye();
	XMFLOAT3 target_moved = GetTarget();

	eye_moved.x += move.x;
	eye_moved.y += move.y;
	eye_moved.z += move.z;

	target_moved.x += move.x;
	target_moved.y += move.y;
	target_moved.z += move.z;

	SetEye( eye_moved );
	SetTarget( target_moved );
}

